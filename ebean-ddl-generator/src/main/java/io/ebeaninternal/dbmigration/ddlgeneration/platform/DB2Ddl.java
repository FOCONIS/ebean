package io.ebeaninternal.dbmigration.ddlgeneration.platform;

import java.io.IOException;

import io.ebean.config.dbplatform.DatabasePlatform;

/**
 * DB2 platform specific DDL.
 */
public class DB2Ddl extends PlatformDdl {

  public DB2Ddl(DatabasePlatform platform) {
    super(platform);
    this.dropTableIfExists = "drop table ";
    this.dropSequenceIfExists = "drop sequence ";
    this.dropConstraintIfExists = "NOT USED";
    this.dropIndexIfExists = "NOT USED";
    this.identitySuffix = " generated by default as identity";
    this.columnSetNull = "drop not null";
    this.columnSetType = "set data type";
    this.inlineUniqueWhenNullable = false;
  }

  @Override
  public String alterTableAddUniqueConstraint(String tableName, String uqName, String[] columns, String[] nullableColumns) {
    if (nullableColumns == null || nullableColumns.length == 0) {
      return super.alterTableAddUniqueConstraint(tableName, uqName, columns, nullableColumns);
    }     

    if (uqName == null) {
      throw new NullPointerException();
    }
    StringBuilder sb = new StringBuilder("create unique index ");
    sb.append(maxConstraintName(uqName)).append(" on ").append(tableName).append('(');

    for (int i = 0; i < columns.length; i++) {
      if (i > 0) {
        sb.append(",");
      }
      sb.append(columns[i]);
    }
    sb.append(") exclude null keys");
    return sb.toString();
  }


  @Override
  public String alterTableDropUniqueConstraint(String tableName, String uniqueConstraintName) {
    return alterTableDropConstraint(tableName, uniqueConstraintName)
      + "\n" + dropIndex(uniqueConstraintName, tableName);
  }
  @Override
  public String alterTableDropConstraint(String tableName, String constraintName) {
    StringBuilder sb = new StringBuilder(300);
    sb.append("delimiter $$\n")
      .append("begin\n")
      .append("if exists (select constname from syscat.tabconst where tabschema = current_schema and constname = '")
      .append(maxConstraintName(constraintName).toUpperCase())
      .append("' and tabname = '").append(lowerTableName(tableName).toUpperCase()).append("') then\n")

      .append("  prepare stmt from 'alter table ").append(lowerTableName(tableName))
      .append(" drop constraint ").append(maxConstraintName(constraintName)).append("';\n")

      .append("  execute stmt;\n")
      .append("end if;\n")
      .append("end$$");
    return sb.toString();

  }

  @Override
  public String dropIndex(String indexName, String tableName, boolean concurrent) {
    StringBuilder sb = new StringBuilder(300);
    sb.append("delimiter $$\n")
      .append("begin\n")
      .append("if exists (select indname from syscat.indexes where indschema = current_schema and indname = '")
      .append(maxConstraintName(indexName).toUpperCase()).append("') then\n")
      .append("  prepare stmt from 'drop index ").append(maxConstraintName(indexName)).append("';\n")
      .append("  execute stmt;\n")
      .append("end if;\n")
      .append("end$$");
    return sb.toString();
  }

  @Override
  public String dropSequence(String sequenceName) {
    StringBuilder sb = new StringBuilder(300);
    sb.append("delimiter $$\n");
    sb.append("begin\n");
    sb.append("if exists (select seqschema from syscat.sequences where seqschema = current_schema and seqname = '")
      .append(maxConstraintName(sequenceName).toUpperCase()).append("') then\n");
    sb.append("  prepare stmt from 'drop sequence ").append(maxConstraintName(sequenceName)).append("';\n");
    sb.append("  execute stmt;\n");
    sb.append("end if;\n");
    sb.append("end$$");
    return sb.toString();
  }



  static class Db2AlterTableWrite extends BaseAlterTableWrite {

    public Db2AlterTableWrite(String tableName) {
      super(tableName);
    }

    @Override
    public void write(Appendable target) throws IOException {
      // TODO Auto-generated method stub
      raw("call sysproc.admin_cmd('reorg table " + tableName() + "')");
      super.write(target);
    }

  }
}
