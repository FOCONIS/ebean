package io.ebeaninternal.dbmigration.ddlgeneration.platform;

import java.io.IOException;

import io.ebean.annotation.ConstraintMode;
import io.ebean.config.dbplatform.DatabasePlatform;
import io.ebeaninternal.dbmigration.ddlgeneration.DdlAlterTable;
import io.ebeaninternal.dbmigration.ddlgeneration.DdlBuffer;
import io.ebeaninternal.dbmigration.ddlgeneration.DdlWrite;

/**
 * DB2 platform specific DDL.
 */
public class DB2Ddl extends PlatformDdl {

  public DB2Ddl(DatabasePlatform platform) {
    super(platform);
    this.dropTableIfExists = "drop table ";
    this.dropSequenceIfExists = "drop sequence ";
    this.dropConstraintIfExists = "NOT USED";
    this.dropIndexIfExists = "NOT USED";
    this.identitySuffix = " generated by default as identity";
    this.columnSetNull = "drop not null";
    this.columnSetType = "set data type";
    this.inlineUniqueWhenNullable = false;
  }

  @Override
  public void alterTableAddUniqueConstraint(DdlBuffer buffer, String tableName, String uqName, String[] columns,
    String[] nullableColumns) {
    if (nullableColumns == null || nullableColumns.length == 0) {
      super.alterTableAddUniqueConstraint(buffer, tableName, uqName, columns, nullableColumns);
    } else {
      if (uqName == null) {
        throw new NullPointerException();
      }
      buffer.append("create unique index ")
          .append(maxConstraintName(uqName));
      buffer.append(" on ").append(lowerTableName(tableName)).append("(");
      for (int i = 0; i < columns.length; i++) {
        if (i > 0) {
          buffer.append(",");
        }
        buffer.append(lowerColumnName(columns[i]));
      }
      buffer.append(") exclude null keys").endOfStatement();
    }
  }

  @Override
  public void alterTableDropUniqueConstraint(DdlBuffer buffer, String tableName, String uniqueConstraintName) {
    alterTableDropConstraint(buffer, tableName, uniqueConstraintName);
    dropIndex(buffer, uniqueConstraintName, tableName);
  }




  @Override
  protected void appendForeignKeyOnUpdate(DdlBuffer buffer, ConstraintMode mode) {
    // do nothing, no on update clause for db2
  }

  @Override
  protected DdlAlterTable alterTable(DdlWrite writer, String tableName) {
    return writer.alterTable(tableName, Db2AlterTableWrite::new);
  }

  @Override
  public void alterTableDropConstraint(DdlBuffer buffer, String tableName, String constraintName) {
    //
    buffer.append("delimiter $$\n")
      .append("begin\n")
      .append("if exists (select constname from syscat.tabconst where tabschema = current_schema and constname = '")
      .append(maxConstraintName(constraintName).toUpperCase())
      .append("' and tabname = '").append(lowerTableName(tableName).toUpperCase()).append("') then\n")

      .append("  prepare stmt from 'alter table ").append(lowerTableName(tableName))
      .append(" drop constraint ").append(maxConstraintName(constraintName)).append("';\n")

      .append("  execute stmt;\n")
      .append("end if;\n")
      .append("end$$")
      .end();

  }

  @Override
  public void dropIndex(DdlBuffer buffer, String indexName, String tableName, boolean concurrent) {
    buffer.append("delimiter $$\n")
      .append("begin\n")
      .append("if exists (select indname from syscat.indexes where indschema = current_schema and indname = '")
      .append(maxConstraintName(indexName).toUpperCase()).append("') then\n")
      .append("  prepare stmt from 'drop index ").append(maxConstraintName(indexName)).append("';\n")
      .append("  execute stmt;\n")
      .append("end if;\n")
      .append("end$$")
      .end();
  }

  public String dropSequence(String sequenceName) {
    StringBuilder sb = new StringBuilder(300);
    sb.append("delimiter $$\n");
    sb.append("begin\n");
    sb.append("if exists (select seqschema from syscat.sequences where seqschema = current_schema and seqname = '")
      .append(maxConstraintName(sequenceName).toUpperCase()).append("') then\n");
    sb.append("  prepare stmt from 'drop sequence ").append(maxConstraintName(sequenceName)).append("';\n");
    sb.append("  execute stmt;\n");
    sb.append("end if;\n");
    sb.append("end$$");
    return sb.toString();
  }

  @Override
  public void alterTableDropForeignKey(DdlBuffer buffer, String tableName, String fkName) {
    alterTableDropConstraint(buffer, tableName, fkName);
  }

  static class Db2AlterTableWrite extends BaseAlterTableWrite {

    public Db2AlterTableWrite(String tableName) {
      super(tableName);
    }

    @Override
    public void write(Appendable target) throws IOException {
      // TODO Auto-generated method stub
      raw("call sysproc.admin_cmd('reorg table " + tableName() + "')");
      super.write(target);

    }

  }

}
